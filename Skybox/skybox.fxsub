#ifndef SKYBOX_MAX_SIZE
#   define SKYBOX_MAX_SIZE 1000
#endif

#ifndef SKYDOME_ENABLE
#   define SKYDOME_ENABLE 0
#endif

#define PI_2 (3.141592654f * 2.0)
#define InvPIE 0.318309886142f

float4x4 matViewProject : VIEWPROJECTION;

float3 srgb2linear(float3 rgb)
{
    const float ALPHA = 0.055f;
    return rgb < 0.04045f ? rgb / 12.92f : pow((rgb + ALPHA) / (1 + ALPHA), 2.4f);
}

float3 linear2srgb(float3 srgb)
{
    const float ALPHA = 0.055f;
    return srgb < 0.0031308f ? 12.92f * srgb : (1 + ALPHA) * pow(srgb, 1.0f / 2.4f) - ALPHA;
}

float4 srgb2linear(float4 c)
{
    return float4(srgb2linear(c.rgb), c.a);
}

float4 linear2srgb(float4 c)
{
    return float4(linear2srgb(c.rgb), c.a);
}

float2 computeSphereCoord(float3 normal)
{
    float2 coord = float2(1 - (atan2(normal.x, normal.z) * InvPIE * 0.5f + 0.5f), acos(normal.y) * InvPIE);
    return coord;
}

float3 DecodeRGBM(in float4 rgbm)
{
    return 6 * rgbm.rgb * rgbm.a;
}

float3x3 makeRotate(float eulerX, float eulerY, float eulerZ)
{
    float sj, cj, si, ci, sh, ch;

    sincos(eulerX, si, ci);
    sincos(eulerY, sj, cj);
    sincos(eulerZ, sh, ch);

    float cc = ci * ch;
    float cs = ci * sh;
    float sc = si * ch;
    float ss = si * sh;

    float a1 = cj * ch;
    float a2 = sj * sc - cs;
    float a3 = sj * cc + ss;

    float b1 = cj * sh;
    float b2 = sj * ss + cc;
    float b3 = sj * cs - sc;

    float c1 = -sj;
    float c2 = cj * si;
    float c3 = cj * ci;
    
    float3x3 rotate;
    rotate[0] = float3(a1, a2, a3);
    rotate[1] = float3(b1, b2, b3);
    rotate[2] = float3(c1, c2, c3);
    
    return rotate;
}

shared texture2D ShadowmapMap : RENDERCOLORTARGET;
sampler ShadowmapSamp = sampler_state {
    texture = <ShadowmapMap>;
    MinFilter = LINEAR; MagFilter = LINEAR; MipFilter = LINEAR;
    AddressU  = CLAMP;  AddressV = CLAMP;
};

bool ExistRay : CONTROLOBJECT<string name = "ray.x";>;
float mScale : CONTROLOBJECT < string name="(self)"; string item = "Scale+"; >;

float EnvRotateX : CONTROLOBJECT < string name="ray_controller.pmx"; string item = "EnvRotateX"; >;
float EnvRotateY : CONTROLOBJECT < string name="ray_controller.pmx"; string item = "EnvRotateY"; >;
float EnvRotateZ : CONTROLOBJECT < string name="ray_controller.pmx"; string item = "EnvRotateZ"; >;

static float rotateX = EnvRotateX * PI_2;
static float rotateY = EnvRotateY * PI_2;
static float rotateZ = EnvRotateZ * PI_2;
static float3x3 rotate = makeRotate(rotateX, rotateY, rotateZ);

texture decal : MATERIALTEXTURE;
sampler decalMap = sampler_state
{
    texture = <decal>;
    MINFILTER = LINEAR;
    MAGFILTER = LINEAR;
    MIPFILTER = NONE;
    ADDRESSU  = CLAMP;
    ADDRESSV  = CLAMP;
};

void SkyboxVS(
    in float4 Position : POSITION,
    out float4 oNormal   : TEXCOORD0,
    out float4 oPosition : SV_Position)
{
#if SKYDOME_ENABLE
    oNormal = normalize(Position);
    oNormal.y = oNormal.y < -0.05 ? -0.05 : oNormal.y;
    oNormal.y += 0.04999;
    oPosition = mul(float4(oNormal.xyz * lerp(SKYBOX_MIN_SIZE, SKYBOX_MAX_SIZE, mScale), 1) , matViewProject);
    oNormal.y -= 0.04999;
#else
    oNormal = normalize(Position);
    oPosition = mul(float4(oNormal.xyz * lerp(SKYBOX_MIN_SIZE, SKYBOX_MAX_SIZE, mScale), 1), matViewProject);
#endif
}

float4 SkyboxPS(in float4 normal : TEXCOORD0, in float4 screenPosition : SV_Position) : COLOR
{
    float3 N = normalize(mul(rotate, normal.xyz));
    
    float4 color = tex2D(decalMap, computeSphereCoord(N));
#if SKYDOME_ENABLE
    if (ExistRay)
    {
        color *= lerp(1, tex2D(ShadowmapSamp, float2(screenPosition.xy) / ViewportSize + ViewportOffset).r, 0.9);
    }
#endif
    
#if SKYBOX_HDR_ENABLE
    return float4(linear2srgb(DecodeRGBM(color)), 1);
#else
    return color;
#endif
}

#define OBJECT_TEC(name, mmdpass) \
    technique name < string MMDPass = mmdpass; \
    string Script = \
        "RenderColorTarget0=;" \
        "RenderDepthStencilTarget=;" \
        "Pass=DrawObject;" \
    ; \
    > { \
        pass DrawObject { \
            AlphaTestEnable = FALSE; AlphaBlendEnable = FALSE; \
            VertexShader = compile vs_3_0 SkyboxVS(); \
            PixelShader  = compile ps_3_0 SkyboxPS(); \
        } \
    }

OBJECT_TEC(MainTec0, "object")
OBJECT_TEC(MainTec1, "object_ss")

technique EdgeTec < string MMDPass = "edge"; > {}
technique ShadowTec < string MMDPass = "shadow"; > {}
technique ZplotTec < string MMDPass = "zplot"; > {}